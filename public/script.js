document.addEventListener("DOMContentLoaded", function () {
  const menuLinks = document.querySelectorAll("aside ul li a");
  const content = document.querySelector(".content");

  const pages = {
    "Trang ch·ªß": `
      <h2>Ch√†o m·ª´ng ƒë·∫øn v·ªõi H·ªá th·ªëng Qu·∫£n l√Ω M·∫°ng CHATL</h2>
      <div class="card">
        <p>H·ªá th·ªëng Qu·∫£n l√Ω M·∫°ng CHATL l√† gi·∫£i ph√°p gi√°m s√°t v√† qu·∫£n l√Ω h·∫° t·∫ßng m·∫°ng ti√™n ti·∫øn, ƒë∆∞·ª£c ph√°t tri·ªÉn nh·∫±m mang ƒë·∫øn cho ng∆∞·ªùi qu·∫£n tr·ªã m·∫°ng m·ªôt c√¥ng c·ª• to√†n di·ªán, tr·ª±c quan v√† hi·ªáu qu·∫£. V·ªõi giao di·ªán th√¢n thi·ªán, c√¥ng ngh·ªá hi·ªán ƒë·∫°i v√† kh·∫£ nƒÉng m·ªü r·ªông m·∫°nh m·∫Ω, CHATL kh√¥ng ch·ªâ gi√∫p b·∫°n theo d√µi tr·∫°ng th√°i thi·∫øt b·ªã m·∫°ng theo th·ªùi gian th·ª±c m√† c√≤n cung c·∫•p c√°c c√¥ng c·ª• ph√¢n t√≠ch hi·ªáu su·∫•t, ph√°t hi·ªán s·ª± c·ªë v√† c·∫£nh b√°o s·ªõm ƒë·ªÉ ƒë·∫£m b·∫£o h·ªá th·ªëng lu√¥n v·∫≠n h√†nh ·ªïn ƒë·ªãnh, an to√†n.</p>
        <h3>T·∫°i sao ch·ªçn CHATL?</h3>
        <ul>
          <li class="animated-list-item"><b>Gi√°m s√°t theo th·ªùi gian th·ª±c:</b> Hi·ªÉn th·ªã tr·ª±c quan th√¥ng tin ho·∫°t ƒë·ªông c·ªßa thi·∫øt b·ªã, hi·ªáu su·∫•t CPU, RAM, bƒÉng th√¥ng v√† nhi·ªÅu ch·ªâ s·ªë quan tr·ªçng kh√°c.</li>
          <li class="animated-list-item"><b>Ph√°t hi·ªán v√† c·∫£nh b√°o s·ª± c·ªë nhanh ch√≥ng:</b> H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông c·∫£nh b√°o khi c√≥ s·ª± c·ªë x·∫£y ra, gi√∫p ng∆∞·ªùi qu·∫£n tr·ªã k·ªãp th·ªùi x·ª≠ l√Ω, gi·∫£m thi·ªÉu r·ªßi ro gi√°n ƒëo·∫°n d·ªãch v·ª•.</li>
          <li class="animated-list-item"><b>Qu·∫£n l√Ω theo t·∫ßng/l·ªõp logic:</b> T·ªëi ∆∞u cho t√≤a nh√† nhi·ªÅu t·∫ßng ho·∫∑c h·ªá th·ªëng m·∫°ng ph·ª©c t·∫°p, b·∫°n c√≥ th·ªÉ d·ªÖ d√†ng ch·ªçn t·∫ßng v√† theo d√µi thi·∫øt b·ªã t∆∞∆°ng ·ª©ng.</li>
          <li class="animated-list-item"><b>L∆∞u tr·ªØ log v√† th·ªëng k√™ k·ªá l·ªãch s·ª≠:</b> H·ªó tr·ª£ ph√¢n t√≠ch d√†i h·∫°n v√† b√°o c√°o hi·ªáu su·∫•t h·ªá th·ªëng, t·ª´ ƒë√≥ ƒë∆∞a ra c√°c quy·∫øt ƒë·ªãnh n√¢ng c·∫•p v√† t·ªëi ∆∞u h·∫° t·∫ßng.</li>
          <li class="animated-list-item"><b>T∆∞∆°ng th√≠ch linh ho·∫°t:</b> H·ªá th·ªëng h·ªó tr·ª£ chu·∫©n giao ti·∫øp SNMP v√† REST API, d·ªÖ d√†ng t√≠ch h·ª£p v·ªõi c√°c thi·∫øt b·ªã m·∫°ng ph·ªï bi·∫øn v√† ph·∫ßn m·ªÅm gi√°m s√°t kh√°c.</li>
          <li class="animated-list-item"><b>B·∫£o m·∫≠t cao:</b> M·ªçi k·∫øt n·ªëi v√† trao ƒë·ªïi d·ªØ li·ªáu ƒë·ªÅu ƒë∆∞·ª£c m√£ h√≥a v√† b·∫£o v·ªá nghi√™m ng·∫∑t, ƒë·∫£m b·∫£o an to√†n tuy·ªát ƒë·ªëi cho h·ªá th·ªëng m·∫°ng c·ªßa b·∫°n.</li>
        </ul>
        <h3>CHATL d√†nh cho ai?</h3>
        <ul>
          <li class="animated-list-item">Qu·∫£n tr·ªã vi√™n m·∫°ng trong c√°c t√≤a nh√† vƒÉn ph√≤ng, kh√°ch s·∫°n, khu c√¥ng nghi·ªáp, tr∆∞·ªùng h·ªçc...</li>
          <li class="animated-list-item">C√°c t·ªï ch·ª©c mu·ªën c√≥ c√°i nh√¨n to√†n di·ªán v√† ch·ªß ƒë·ªông v·ªÅ h·ªá th·ªëng h·∫° t·∫ßng CNTT c·ªßa m√¨nh.</li>
          <li class="animated-list-item">Nh·ªØng ƒë·ªôi ng≈© k·ªπ thu·∫≠t mu·ªën tri·ªÉn khai c√¥ng c·ª• gi√°m s√°t nhanh ch√≥ng, hi·ªáu qu·∫£ v√† d·ªÖ t√πy ch·ªânh.</li>
        </ul>
        <p>H√£y c√πng CHATL x√¢y d·ª±ng m·ªôt h·ªá th·ªëng m·∫°ng ·ªïn ƒë·ªãnh - an to√†n - hi·ªáu qu·∫£.<br>B·∫Øt ƒë·∫ßu h√†nh tr√¨nh qu·∫£n l√Ω chuy√™n nghi·ªáp v√† th√¥ng minh ngay h√¥m nay!</p>
      </div>
    `,
    "Gi·ªõi thi·ªáu": `
      <h2>H·ªá th·ªëng Qu·∫£n l√Ω M·∫°ng CHATL ‚Äì Gi·∫£i ph√°p to√†n di·ªán cho gi√°m s√°t h·∫° t·∫ßng s·ªë</h2>
      <div class="card">
        <p>Trong th·ªùi ƒë·∫°i s·ªë h√≥a ng√†y c√†ng m·∫°nh m·∫Ω, vi·ªác ƒë·∫£m b·∫£o s·ª± ·ªïn ƒë·ªãnh, an to√†n v√† hi·ªáu qu·∫£ c·ªßa h·∫° t·∫ßng m·∫°ng tr·ªü th√†nh m·ªôt y√™u c·∫ßu t·∫•t y·∫øu ƒë·ªëi v·ªõi m·ªçi t·ªï ch·ª©c, doanh nghi·ªáp v√† c∆° s·ªü c√¥ng ngh·ªá. Hi·ªÉu r√µ ƒëi·ªÅu ƒë√≥, ch√∫ng t√¥i ƒë√£ ph√°t tri·ªÉn CHATL ‚Äì m·ªôt n·ªÅn t·∫£ng qu·∫£n l√Ω m·∫°ng hi·ªán ƒë·∫°i, th√¥ng minh v√† m·∫°nh m·∫Ω, gi√∫p b·∫°n ki·ªÉm so√°t to√†n b·ªô h·ªá th·ªëng m·∫°ng trong t·∫ßm tay.</p>
        <p>CHATL kh√¥ng ƒë∆°n thu·∫ßn l√† m·ªôt c√¥ng c·ª• gi√°m s√°t, m√† l√† m·ªôt tr·ª£ l√Ω k·ªπ thu·∫≠t s·ªë to√†n nƒÉng, mang l·∫°i cho b·∫°n m·ªôt c√°i nh√¨n to√†n c·∫£nh v·ªÅ tr·∫°ng th√°i v·∫≠n h√†nh c·ªßa thi·∫øt b·ªã m·∫°ng ‚Äì t·ª´ hi·ªáu su·∫•t ph·∫ßn c·ª©ng nh∆∞ CPU, RAM ƒë·∫øn tr·∫°ng th√°i ho·∫°t ƒë·ªông, c·∫£nh b√°o l·ªói, v√† ph√¢n t√≠ch d·ªØ li·ªáu l·ªãch s·ª≠. D√π b·∫°n ƒëang v·∫≠n h√†nh m·ªôt t√≤a nh√† vƒÉn ph√≤ng 30 t·∫ßng, m·ªôt h·ªá th·ªëng tr∆∞·ªùng h·ªçc hay m·ªôt m·∫°ng l∆∞·ªõi doanh nghi·ªáp ph·ª©c t·∫°p, CHATL ƒë·ªÅu c√≥ th·ªÉ t√πy bi·∫øn linh ho·∫°t ƒë·ªÉ ƒë√°p ·ª©ng m·ªçi nhu c·∫ßu qu·∫£n l√Ω.</p>
        <h3>Nh·ªØng t√≠nh nƒÉng n·ªïi b·∫≠t c·ªßa CHATL:</h3>
        <ul>
          <li class="animated-list-item">üîç <b>Gi√°m s√°t theo th·ªùi gian th·ª±c</b><br>To√†n b·ªô thi·∫øt b·ªã m·∫°ng ƒë∆∞·ª£c hi·ªÉn th·ªã sinh ƒë·ªông v√† tr·ª±c quan, gi√∫p b·∫°n n·∫Øm b·∫Øt nhanh ch√≥ng t√¨nh tr·∫°ng ho·∫°t ƒë·ªông hi·ªán t·∫°i. Bi·ªÉu ƒë·ªì th·ªëng k√™ hi·ªáu su·∫•t ƒë∆∞·ª£c c·∫≠p nh·∫≠t li√™n t·ª•c, h·ªó tr·ª£ ƒë∆∞a ra c√°c quy·∫øt ƒë·ªãnh k·ªãp th·ªùi v√† ch√≠nh x√°c.</li>
          <li class="animated-list-item">üìä <b>Ph√¢n t√≠ch hi·ªáu su·∫•t & th·ªëng k√™ d·ªØ li·ªáu l·ªãch s·ª≠</b><br>CHATL kh√¥ng ch·ªâ d·ª´ng l·∫°i ·ªü hi·ªán t·∫°i. H·ªá th·ªëng h·ªó tr·ª£ l∆∞u tr·ªØ v√† ph√¢n t√≠ch d·ªØ li·ªáu d√†i h·∫°n, gi√∫p b·∫°n ƒë√°nh gi√° xu h∆∞·ªõng s·ª≠ d·ª•ng t√†i nguy√™n m·∫°ng, t·ª´ ƒë√≥ t·ªëi ∆∞u h√≥a ho·∫°t ƒë·ªông v√† d·ª± ƒëo√°n c√°c s·ª± c·ªë ti·ªÅm ·∫©n.</li>
          <li class="animated-list-item">üö® <b>C·∫£nh b√°o v√† x·ª≠ l√Ω s·ª± c·ªë th√¥ng minh</b><br>V·ªõi h·ªá th·ªëng c·∫£nh b√°o linh ho·∫°t theo ng∆∞·ª°ng (threshold), CHATL s·∫Ω t·ª± ƒë·ªông th√¥ng b√°o khi ph√°t hi·ªán d·∫•u hi·ªáu b·∫•t th∆∞·ªùng ‚Äì t·ª´ vi·ªác CPU v∆∞·ª£t m·ª©c, RAM b·ªã tr√†n, cho ƒë·∫øn thi·∫øt b·ªã m·∫•t k·∫øt n·ªëi. ƒêi·ªÅu n√†y cho ph√©p b·∫°n ph·∫£n ·ª©ng nhanh, gi·∫£m thi·ªÉu r·ªßi ro v√† th·ªùi gian gi√°n ƒëo·∫°n.</li>
          <li class="animated-list-item">üè¢ <b>Qu·∫£n l√Ω ph√¢n t·∫ßng ‚Äì ph√π h·ª£p v·ªõi t√≤a nh√† l·ªõn ho·∫∑c h·ªá th·ªëng nhi·ªÅu khu v·ª±c</b><br>M·ªói t·∫ßng, m·ªói khu v·ª±c c√≥ th·ªÉ ƒë∆∞·ª£c qu·∫£n l√Ω ri√™ng bi·ªát nh∆∞ng v·∫´n ƒë·ªìng b·ªô trong h·ªá th·ªëng chung. Vi·ªác n√†y gi√∫p cho c√°c t·ªï ch·ª©c c√≥ c·∫•u tr√∫c ph·ª©c t·∫°p d·ªÖ d√†ng ki·ªÉm so√°t v√† ph√¢n quy·ªÅn v·∫≠n h√†nh.</li>
          <li class="animated-list-item">üîó <b>T√≠ch h·ª£p linh ho·∫°t v√† b·∫£o m·∫≠t m·∫°nh m·∫Ω</b><br>H·ªá th·ªëng h·ªó tr·ª£ SNMP, REST API v√† nhi·ªÅu chu·∫©n c√¥ng nghi·ªáp kh√°c, d·ªÖ d√†ng t√≠ch h·ª£p v·ªõi c√°c ph·∫ßn m·ªÅm qu·∫£n l√Ω hi·ªán c√≥. B√™n c·∫°nh ƒë√≥, CHATL ƒë∆∞·ª£c thi·∫øt k·∫ø v·ªõi c√°c c∆° ch·∫ø b·∫£o m·∫≠t ch·∫∑t ch·∫Ω, ƒë·∫£m b·∫£o an to√†n tuy·ªát ƒë·ªëi cho d·ªØ li·ªáu m·∫°ng v√† ng∆∞·ªùi d√πng.</li>
        </ul>
        <h3>CHATL ‚Äì Ng∆∞·ªùi b·∫°n ƒë·ªìng h√†nh tin c·∫≠y c·ªßa qu·∫£n tr·ªã vi√™n m·∫°ng</h3>
        <p>V·ªõi ph∆∞∆°ng ch√¢m "Ch·ªß ƒë·ªông ‚Äì Ch√≠nh x√°c ‚Äì Chuy√™n nghi·ªáp", CHATL ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi ƒë·ªôi ng≈© k·ªπ thu·∫≠t tr·∫ª, gi√†u t√¢m huy·∫øt, mong mu·ªën mang ƒë·∫øn m·ªôt s·∫£n ph·∫©m kh√¥ng ch·ªâ v·∫≠n h√†nh t·ªët m√† c√≤n d·ªÖ s·ª≠ d·ª•ng, d·ªÖ tri·ªÉn khai v√† d·ªÖ m·ªü r·ªông. M·ªçi chi ti·∫øt giao di·ªán ƒë·ªÅu ƒë∆∞·ª£c thi·∫øt k·∫ø th√¢n thi·ªán, t·ªëi ∆∞u tr·∫£i nghi·ªám ng∆∞·ªùi d√πng. M·ªçi t√≠nh nƒÉng ƒë·ªÅu h∆∞·ªõng ƒë·∫øn s·ª± t·ª± ƒë·ªông h√≥a, th√¥ng minh v√† ti·∫øt ki·ªám th·ªùi gian.</p>
        <h3>B·∫Øt ƒë·∫ßu h√†nh tr√¨nh s·ªë h√≥a v√† ki·ªÉm so√°t m·∫°ng to√†n di·ªán c√πng CHATL</h3>
        <p>Ch√∫ng t√¥i tin r·∫±ng, m·ªói t·ªï ch·ª©c ƒë·ªÅu x·ª©ng ƒë√°ng c√≥ m·ªôt c√¥ng c·ª• gi√°m s√°t m·∫°ng ƒë·∫≥ng c·∫•p ‚Äì v√† ƒë√≥ ch√≠nh l√† l√Ω do CHATL ra ƒë·ªùi. H√£y ƒë·ªÉ CHATL tr·ªü th√†nh "trung t√¢m ƒëi·ªÅu ph·ªëi th√¥ng minh" cho h·∫° t·∫ßng m·∫°ng c·ªßa b·∫°n.<br>D√π b·∫°n l√† k·ªπ s∆∞ IT, qu·∫£n tr·ªã vi√™n m·∫°ng hay l√£nh ƒë·∫°o doanh nghi·ªáp, CHATL lu√¥n s·∫µn s√†ng ƒë·ªìng h√†nh c√πng b·∫°n ‚Äì tr√™n h√†nh tr√¨nh x√¢y d·ª±ng h·ªá th·ªëng m·∫°ng ·ªïn ƒë·ªãnh ‚Äì an to√†n ‚Äì hi·ªán ƒë·∫°i.</p>
      </div>
    `,
    "Qu·∫£n l√Ω m·∫°ng": `
      <h2>Qu·∫£n l√Ω t√≤a nh√† 30 t·∫ßng</h2>
      <div class="card">
        <p>Ch·ªçn t·∫ßng ƒë·ªÉ xem th√¥ng tin thi·∫øt b·ªã m·∫°ng, hi·ªáu su·∫•t v√† l·ªói:</p>
        <div class="floor-list">
          ${[...Array(30).keys()].map(i => {
            const floor = 30 - i;
            return `<button class="floor-btn" onclick="loadFloorData(${floor})">T·∫ßng ${floor}</button>`;
          }).join("")}
        </div>
      </div>
    `,
    "Gi√°m s√°t hi·ªáu su·∫•t": `
      <h2>Gi√°m s√°t hi·ªáu su·∫•t h·ªá th·ªëng</h2>
      <div class="card">
        <h3>Th√¥ng tin gi√°m s√°t to√†n h·ªá th·ªëng</h3>
        <div class="time-period-selector">
          <button class="time-btn active" data-period="day">24 gi·ªù</button>
          <button class="time-btn" data-period="week">7 ng√†y</button>
          <button class="time-btn" data-period="month">30 ng√†y</button>
        </div>
        <ul>
          <li>BƒÉng th√¥ng s·ª≠ d·ª•ng: <span class="bandwidth-value">75%</span></li>
          <li>Th·ªùi gian ho·∫°t ƒë·ªông: <span class="uptime-value">99.8%</span></li>
          <li>C·∫£nh b√°o: <span class="alerts-value">2</span></li>
          <li>S·ª± c·ªë ƒëang x·ª≠ l√Ω: <span class="issues-value">1</span></li>
        </ul>
      </div>
      <div class="card">
        <h3>Bi·ªÉu ƒë·ªì hi·ªáu su·∫•t</h3>
        <canvas id="performanceChart" width="600" height="300"></canvas>
      </div>
      <div class="card">
        <h3>Th·ªëng k√™ theo t·∫ßng</h3>
        <table class="performance-table">
          <thead>
            <tr>
              <th>T·∫ßng</th>
              <th>CPU trung b√¨nh</th>
              <th>RAM s·ª≠ d·ª•ng</th>
              <th>BƒÉng th√¥ng</th>
              <th>Tr·∫°ng th√°i</th>
            </tr>
          </thead>
          <tbody>
            ${[...Array(30).keys()].map(i => {
              const floor = 30 - i;
              return `
                <tr>
                  <td>T·∫ßng ${floor}</td>
                  <td class="cpu-value">${(Math.random() * 30 + 20).toFixed(1)}%</td>
                  <td class="ram-value">${(Math.random() * 30 + 50).toFixed(1)}%</td>
                  <td class="bandwidth-value">${(Math.random() * 40 + 30).toFixed(1)}%</td>
                  <td class="status-value">${Math.random() > 0.2 ? '‚úÖ ·ªîn ƒë·ªãnh' : '‚ö† C·∫£nh b√°o'}</td>
                </tr>
              `;
            }).join("")}
          </tbody>
        </table>
      </div>
    `,
    "Thi·∫øt b·ªã m·∫°ng": `
      <h2>Qu·∫£n l√Ω thi·∫øt b·ªã m·∫°ng</h2>
      <div class="card">
        <h3>Danh s√°ch thi·∫øt b·ªã to√†n h·ªá th·ªëng</h3>
        <div class="time-period-selector">
          <button class="time-btn active" data-period="day">24 gi·ªù</button>
          <button class="time-btn" data-period="week">7 ng√†y</button>
          <button class="time-btn" data-period="month">30 ng√†y</button>
        </div>
        <table class="devices-table">
          <thead>
            <tr>
              <th>T√™n thi·∫øt b·ªã</th>
              <th>ƒê·ªãa ch·ªâ IP</th>
              <th>V·ªã tr√≠</th>
              <th>Tr·∫°ng th√°i</th>
              <th>Th·ªùi gian ho·∫°t ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Router ch√≠nh</td>
              <td>192.168.1.1</td>
              <td>Ph√≤ng server</td>
              <td class="status-value">Online</td>
              <td class="uptime-value">15 ng√†y</td>
            </tr>
            <tr>
              <td>Switch t·∫ßng 1</td>
              <td>192.168.1.2</td>
              <td>T·∫ßng 1</td>
              <td class="status-value">Online</td>
              <td class="uptime-value">12 ng√†y</td>
            </tr>
            <tr>
              <td>Access Point t·∫ßng 1</td>
              <td>192.168.1.3</td>
              <td>T·∫ßng 1</td>
              <td class="status-value">Offline</td>
              <td class="uptime-value">0 gi·ªù</td>
            </tr>
            ${[...Array(27).keys()].map(i => {
              const floor = i + 2;
              return `
                <tr>
                  <td>Switch t·∫ßng ${floor}</td>
                  <td>192.168.${floor}.1</td>
                  <td>T·∫ßng ${floor}</td>
                  <td class="status-value">Online</td>
                  <td class="uptime-value">${Math.floor(Math.random() * 10) + 1} ng√†y</td>
                </tr>
                <tr>
                  <td>Access Point t·∫ßng ${floor}</td>
                  <td>192.168.${floor}.2</td>
                  <td>T·∫ßng ${floor}</td>
                  <td class="status-value">Online</td>
                  <td class="uptime-value">${Math.floor(Math.random() * 10) + 1} ng√†y</td>
                </tr>
              `;
            }).join("")}
          </tbody>
        </table>
      </div>
    `,
    "B√°o c√°o l·ªói": `
      <h2>Qu·∫£n l√Ω s·ª± c·ªë h·ªá th·ªëng</h2>
      <div class="card">
        <h3>Danh s√°ch s·ª± c·ªë g·∫ßn ƒë√¢y</h3>
        <div class="report-item">
          <h4>M·∫•t k·∫øt n·ªëi Internet</h4>
          <p><strong>Th·ªùi gian:</strong> 10/4/2023 14:30</p>
          <p><strong>Tr·∫°ng th√°i:</strong> ƒêang x·ª≠ l√Ω</p>
          <p><strong>M√¥ t·∫£:</strong> M·∫•t k·∫øt n·ªëi to√†n b·ªô h·ªá th·ªëng trong 15 ph√∫t</p>
          <p><strong>Nh√¢n vi√™n ph·ª• tr√°ch:</strong> Nguy·ªÖn VƒÉn A</p>
        </div>
        <div class="report-item">
          <h4>Ch·∫≠m m·∫°ng</h4>
          <p><strong>Th·ªùi gian:</strong> 8/4/2023 09:15</p>
          <p><strong>Tr·∫°ng th√°i:</strong> ƒê√£ gi·∫£i quy·∫øt</p>
          <p><strong>M√¥ t·∫£:</strong> T·ªëc ƒë·ªô m·∫°ng ch·∫≠m b·∫•t th∆∞·ªùng</p>
          <p><strong>Gi·∫£i ph√°p:</strong> Thay th·∫ø c√°p quang t·∫ßng 5</p>
        </div>
        <div class="report-item">
          <h4>Qu√° t·∫£i server</h4>
          <p><strong>Th·ªùi gian:</strong> 5/4/2023 11:45</p>
          <p><strong>Tr·∫°ng th√°i:</strong> ƒê√£ gi·∫£i quy·∫øt</p>
          <p><strong>M√¥ t·∫£:</strong> CPU server ƒë·∫°t 100% trong 30 ph√∫t</p>
          <p><strong>Gi·∫£i ph√°p:</strong> Th√™m RAM v√† t·ªëi ∆∞u d·ªãch v·ª•</p>
        </div>
        <button class="btn-report">B√°o c√°o s·ª± c·ªë m·ªõi</button>
      </div>
    `,
    "Li√™n h·ªá": `
      <h2>Th√¥ng tin li√™n h·ªá</h2>
      <div class="card">
        <p>üìû S·ªë ƒëi·ªán tho·∫°i: <strong>0961 186 421</strong></p>
        <p>üìß Email: <strong>ttoan2286@gmail.com</strong></p>
        <p>üìç ƒê·ªãa ch·ªâ: 96A ƒê. Tr·∫ßn Ph√∫, P. M·ªô Lao, H√† ƒê√¥ng, H√† N·ªôi</p>
      </div>
      <div class="card">
        <h3>G·ª≠i y√™u c·∫ßu h·ªó tr·ª£</h3>
        <form class="contact-form">
          <div class="form-group">
            <label for="name">H·ªç v√† t√™n:</label>
            <input type="text" id="name" required>
          </div>
          <div class="form-group">
            <label for="email">Email:</label>
            <input type="email" id="email" required>
          </div>
          <div class="form-group">
            <label for="message">N·ªôi dung:</label>
            <textarea id="message" rows="5" required></textarea>
          </div>
          <button type="submit" class="btn-submit">G·ª≠i y√™u c·∫ßu</button>
        </form>
      </div>
    `,
    "ƒêƒÉng k√Ω": `
      <h2>ƒêƒÉng k√Ω t√†i kho·∫£n</h2>
      <form id="registerForm" class="card" style="max-width:400px">
        <div class="form-group">
          <label for="reg-username">T√™n ƒëƒÉng nh·∫≠p:</label>
          <input type="text" id="reg-username" required>
        </div>
        <div class="form-group">
          <label for="reg-password">M·∫≠t kh·∫©u:</label>
          <input type="password" id="reg-password" required>
        </div>
        <button type="submit" class="btn-submit">ƒêƒÉng k√Ω</button>
        <div id="registerMsg"></div>
      </form>
    `,
    "ƒêƒÉng nh·∫≠p": `
      <h2>ƒêƒÉng nh·∫≠p</h2>
      <form id="loginForm" class="card" style="max-width:400px">
        <div class="form-group">
          <label for="login-username">T√™n ƒëƒÉng nh·∫≠p:</label>
          <input type="text" id="login-username" required>
        </div>
        <div class="form-group">
          <label for="login-password">M·∫≠t kh·∫©u:</label>
          <input type="password" id="login-password" required>
        </div>
        <button type="submit" class="btn-submit">ƒêƒÉng nh·∫≠p</button>
        <div id="loginMsg"></div>
      </form>
    `
  };

  menuLinks.forEach(link => {
    link.addEventListener("click", function (e) {
      e.preventDefault();
      // X√≥a active ·ªü t·∫•t c·∫£ menu
      menuLinks.forEach(l => l.classList.remove("active"));
      // Th√™m active cho menu ƒë∆∞·ª£c b·∫•m
      this.classList.add("active");
      const selected = this.textContent.trim();
      if (pages[selected]) {
        if (selected === "Trang ch·ªß" || selected === "Gi·ªõi thi·ªáu") {
          content.innerHTML = `<div class="animated-content">${pages[selected]}</div>`;
        } else {
          content.innerHTML = pages[selected];
        }
        // Kh·ªüi t·∫°o bi·ªÉu ƒë·ªì n·∫øu c√≥
        if (selected === "Gi√°m s√°t hi·ªáu su·∫•t") {
          setTimeout(() => {
            const ctx = document.getElementById("performanceChart").getContext("2d");
            new Chart(ctx, {
              type: "line",
              data: {
                labels: ["00:00", "04:00", "08:00", "12:00", "16:00", "20:00"],
                datasets: [
                  {
                    label: "CPU trung b√¨nh (%)",
                    data: [25, 30, 45, 50, 40, 35],
                    borderColor: "#0074D9",
                    fill: false
                  },
                  {
                    label: "RAM trung b√¨nh (%)",
                    data: [50, 55, 60, 65, 58, 52],
                    borderColor: "#FF4136",
                    fill: false
                  },
                  {
                    label: "BƒÉng th√¥ng (%)",
                    data: [30, 40, 60, 70, 50, 45],
                    borderColor: "#2ECC40",
                    fill: false
                  }
                ]
              },
              options: {
                responsive: true,
                plugins: {
                  legend: {
                    position: 'top'
                  },
                  title: {
                    display: true,
                    text: 'Hi·ªáu su·∫•t h·ªá th·ªëng 24 gi·ªù qua'
                  }
                }
              }
            });
          }, 100);
        }
      } else {
        content.innerHTML = "<div class='card'><p>N·ªôi dung ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t...</p></div>";
      }
    });
  });

  // Load trang ch·ªß m·∫∑c ƒë·ªãnh
  menuLinks[0].classList.add("active");
  content.innerHTML = pages["Trang ch·ªß"];

  window.loadFloorData = function (floor) {
    content.innerHTML = `
      <h2>Th√¥ng tin t·∫ßng ${floor}</h2>
      <div class="card">
        <h3>Thi·∫øt b·ªã m·∫°ng</h3>
        <ul>
          <li>Switch t·∫ßng ${floor} - Ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh</li>
          <li>Router t·∫ßng ${floor} - B√¨nh th∆∞·ªùng</li>
          <li>Access Point t·∫ßng ${floor} - ƒêang k·∫øt n·ªëi</li>
        </ul>
      </div>
      <div class="card">
        <h3>Hi·ªáu su·∫•t thi·∫øt b·ªã</h3>
        <canvas id="performanceChart" width="600" height="300"></canvas>
      </div>
      <div class="card">
        <h3>B√°o c√°o l·ªói</h3>
        <ul>
          <li>[10:10] Switch t·∫ßng ${floor} - Ping delay cao</li>
          <li>[09:45] Router t·∫ßng ${floor} - TƒÉng t·∫£i CPU</li>
        </ul>
      </div>
    `;

    setTimeout(() => {
      const ctx = document.getElementById("performanceChart").getContext("2d");
      new Chart(ctx, {
        type: "line",
        data: {
          labels: ["0s", "5s", "10s", "15s", "20s"],
          datasets: [
            {
              label: "CPU (%)",
              data: [Math.random() * 30 + 20, 40, 45, 35, 50],
              borderColor: "#0074D9",
              fill: false
            },
            {
              label: "RAM (%)",
              data: [50, 60, 55, 58, 62],
              borderColor: "#FF4136",
              fill: false
            }
          ]
        },
        options: {
          responsive: true,
          plugins: {
            legend: {
              position: 'top'
            },
            title: {
              display: true,
              text: 'Hi·ªáu su·∫•t t·∫ßng ' + floor
            }
          }
        }
      });
    }, 100);
  };

  // H√†m l·∫•y d·ªØ li·ªáu t·ª´ API
  async function fetchData(endpoint) {
    try {
      const response = await fetch(`http://localhost:3000/api/${endpoint}`);
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return await response.json();
    } catch (error) {
      console.error('Error fetching data:', error);
      return null;
    }
  }

  // H√†m c·∫≠p nh·∫≠t d·ªØ li·ªáu thi·∫øt b·ªã
  async function updateDevicesData() {
    const devices = await fetchData('devices');
    const devicesTable = document.querySelector('.devices-table tbody');
    if (devices && devices.length > 0) {
      devicesTable.innerHTML = devices.map(device => `
        <tr>
          <td>${device.name}</td>
          <td>${device.ip || device.ipAddress || ''}</td>
          <td>${device.location}</td>
          <td class="status-value">${device.status}</td>
          <td class="uptime-value">${device.uptime || ''}</td>
        </tr>
      `).join('');
    } else {
      devicesTable.innerHTML = `<tr><td colspan="5" style="text-align:center">D·ªØ li·ªáu ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t...</td></tr>`;
    }
  }

  // H√†m c·∫≠p nh·∫≠t d·ªØ li·ªáu hi·ªáu su·∫•t
  async function updatePerformanceData(floor, period) {
    const performance = await fetchData(`performance/${floor}?period=${period}`);
    const chartContainer = document.getElementById('performanceChart');
    if (performance && performance.length > 0 && chartContainer) {
      const ctx = chartContainer.getContext('2d');
      const labels = performance.map(p => new Date(p.timestamp).toLocaleTimeString());
      const cpuData = performance.map(p => p.cpu || p.cpuUsage);
      const ramData = performance.map(p => p.ram || p.memoryUsage);
      const bandwidthData = performance.map(p => p.bandwidth || p.networkUsage);

      if (window.performanceChart) {
        window.performanceChart.destroy();
      }

      window.performanceChart = new Chart(ctx, {
        type: "line",
        data: {
          labels: labels,
          datasets: [
            {
              label: "CPU trung b√¨nh (%)",
              data: cpuData,
              borderColor: "#0074D9",
              fill: false
            },
            {
              label: "RAM trung b√¨nh (%)",
              data: ramData,
              borderColor: "#FF4136",
              fill: false
            },
            {
              label: "BƒÉng th√¥ng (%)",
              data: bandwidthData,
              borderColor: "#2ECC40",
              fill: false
            }
          ]
        },
        options: {
          responsive: true,
          plugins: {
            legend: {
              position: 'top'
            },
            title: {
              display: true,
              text: `Hi·ªáu su·∫•t t·∫ßng ${floor} ${period === 'day' ? '24 gi·ªù qua' : period === 'week' ? '7 ng√†y qua' : '30 ng√†y qua'}`
            }
          }
        }
      });
    } else if (chartContainer) {
      chartContainer.parentElement.innerHTML = '<div style="text-align:center;padding:32px 0;">D·ªØ li·ªáu ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t...</div>';
    }
  }

  // H√†m c·∫≠p nh·∫≠t c·∫£nh b√°o
  async function updateAlerts() {
    const alerts = await fetchData('alerts');
    const alertsContainer = document.querySelector('.alerts-container');
    if (alertsContainer) {
      if (alerts && alerts.length > 0) {
        alertsContainer.innerHTML = alerts.map(alert => `
          <div class="alert-item">
            <h4>${alert.type}</h4>
            <p><strong>Th·ªùi gian:</strong> ${new Date(alert.timestamp).toLocaleString()}</p>
            <p><strong>M·ª©c ƒë·ªô:</strong> ${alert.severity}</p>
            <p><strong>M√¥ t·∫£:</strong> ${alert.message}</p>
          </div>
        `).join('');
      } else {
        alertsContainer.innerHTML = '<div style="text-align:center;padding:32px 0;">D·ªØ li·ªáu ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t...</div>';
      }
    }
  }

  // C·∫≠p nh·∫≠t h√†m updateTimePeriod
  async function updateTimePeriod(period) {
    // C·∫≠p nh·∫≠t d·ªØ li·ªáu thi·∫øt b·ªã
    await updateDevicesData();
    
    // C·∫≠p nh·∫≠t d·ªØ li·ªáu hi·ªáu su·∫•t cho t·∫•t c·∫£ c√°c t·∫ßng
    for (let floor = 1; floor <= 30; floor++) {
      await updatePerformanceData(floor, period);
    }
    
    // C·∫≠p nh·∫≠t c·∫£nh b√°o
    await updateAlerts();
  }

  // Th√™m s·ª± ki·ªán click cho c√°c n√∫t th·ªùi gian
  document.addEventListener('click', async function(e) {
    if (e.target.classList.contains('time-btn')) {
      document.querySelectorAll('.time-btn').forEach(btn => {
        btn.classList.remove('active');
      });
      e.target.classList.add('active');
      await updateTimePeriod(e.target.dataset.period);
    }
  });

  // Kh·ªüi t·∫°o d·ªØ li·ªáu khi trang ƒë∆∞·ª£c t·∫£i
  document.addEventListener('DOMContentLoaded', async function() {
    await updateTimePeriod('day');
  });

  // X·ª≠ l√Ω submit form ƒëƒÉng k√Ω/ƒëƒÉng nh·∫≠p
  document.addEventListener('submit', async function(e) {
    if (e.target && e.target.id === 'registerForm') {
      e.preventDefault();
      const username = document.getElementById('reg-username').value;
      const password = document.getElementById('reg-password').value;
      const msg = document.getElementById('registerMsg');
      msg.textContent = 'ƒêang x·ª≠ l√Ω...';
      const res = await fetch('/api/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, password })
      });
      const data = await res.json();
      msg.textContent = data.message || 'C√≥ l·ªói x·∫£y ra!';
      msg.style.color = res.ok ? 'green' : 'red';
    }
    if (e.target && e.target.id === 'loginForm') {
      e.preventDefault();
      const username = document.getElementById('login-username').value;
      const password = document.getElementById('login-password').value;
      const msg = document.getElementById('loginMsg');
      msg.textContent = 'ƒêang x·ª≠ l√Ω...';
      const res = await fetch('/api/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, password })
      });
      const data = await res.json();
      msg.textContent = data.message || 'C√≥ l·ªói x·∫£y ra!';
      msg.style.color = res.ok ? 'green' : 'red';
    }
  });

  // Th√™m modal ƒëƒÉng nh·∫≠p/ƒëƒÉng k√Ω v√† logic ki·ªÉm tra ƒëƒÉng nh·∫≠p
  function showAuthModal() {
    let modal = document.getElementById('auth-modal');
    if (!modal) {
      modal = document.createElement('div');
      modal.id = 'auth-modal';
      modal.innerHTML = `
        <div class="auth-modal-content">
          <div class="auth-logo">CHATL</div>
          <div id="auth-tabs">
            <button id="show-login" class="auth-tab active">ƒêƒÉng nh·∫≠p</button>
            <button id="show-register" class="auth-tab">ƒêƒÉng k√Ω</button>
          </div>
          <div id="auth-form-container"></div>
        </div>
        <div class="auth-modal-backdrop"></div>
      `;
      document.body.appendChild(modal);
    }
    modal.style.display = 'flex';
    document.querySelector('.container').style.display = 'none';
    renderLoginForm();
    document.getElementById('show-login').onclick = () => {
      setActiveTab('login');
      renderLoginForm();
    };
    document.getElementById('show-register').onclick = () => {
      setActiveTab('register');
      renderRegisterForm();
    };
  }
  function hideAuthModal() {
    const modal = document.getElementById('auth-modal');
    if (modal) modal.style.display = 'none';
    document.querySelector('.container').style.display = 'flex';
  }
  function setActiveTab(tab) {
    document.getElementById('show-login').classList.toggle('active', tab === 'login');
    document.getElementById('show-register').classList.toggle('active', tab === 'register');
  }
  function renderLoginForm() {
    document.getElementById('auth-form-container').innerHTML = `
      <form id="loginFormModal" class="card" style="max-width:400px">
        <div class="form-group">
          <label for="login-emailOrPhone">Email ho·∫∑c S·ªë ƒëi·ªán tho·∫°i:</label>
          <input type="text" id="login-emailOrPhone" required>
        </div>
        <div class="form-group">
          <label for="login-password">M·∫≠t kh·∫©u:</label>
          <input type="password" id="login-password" required>
        </div>
        <button type="submit" class="btn-submit">ƒêƒÉng nh·∫≠p</button>
        <div id="loginMsgModal"></div>
      </form>
    `;
  }
  function renderRegisterForm() {
    document.getElementById('auth-form-container').innerHTML = `
      <form id="registerFormModal" class="card" style="max-width:400px">
        <div class="form-group">
          <label for="reg-email">Email:</label>
          <input type="email" id="reg-email">
        </div>
        <div class="form-group">
          <label for="reg-phone">S·ªë ƒëi·ªán tho·∫°i:</label>
          <input type="text" id="reg-phone">
        </div>
        <div class="form-group">
          <label for="reg-password">M·∫≠t kh·∫©u:</label>
          <input type="password" id="reg-password" required>
        </div>
        <button type="submit" class="btn-submit">ƒêƒÉng k√Ω</button>
        <div id="registerMsgModal"></div>
      </form>
    `;
  }
  function checkAuth() {
    if (!localStorage.getItem('chatl_user')) {
      showAuthModal();
    } else {
      hideAuthModal();
    }
  }
  // X·ª≠ l√Ω submit modal
  document.addEventListener('submit', async function(e) {
    if (e.target && e.target.id === 'registerFormModal') {
      e.preventDefault();
      const email = document.getElementById('reg-email').value;
      const phone = document.getElementById('reg-phone').value;
      const password = document.getElementById('reg-password').value;
      const msg = document.getElementById('registerMsgModal');
      msg.textContent = 'ƒêang x·ª≠ l√Ω...';
      const res = await fetch('/api/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, phone, password })
      });
      const data = await res.json();
      msg.textContent = data.message || 'C√≥ l·ªói x·∫£y ra!';
      msg.style.color = res.ok ? 'green' : 'red';
      if (res.ok) setTimeout(() => { setActiveTab('login'); renderLoginForm(); }, 1000);
    }
    if (e.target && e.target.id === 'loginFormModal') {
      e.preventDefault();
      const emailOrPhone = document.getElementById('login-emailOrPhone').value;
      const password = document.getElementById('login-password').value;
      const msg = document.getElementById('loginMsgModal');
      msg.textContent = 'ƒêang x·ª≠ l√Ω...';
      const res = await fetch('/api/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ emailOrPhone, password })
      });
      const data = await res.json();
      msg.textContent = data.message || 'C√≥ l·ªói x·∫£y ra!';
      msg.style.color = res.ok ? 'green' : 'red';
      if (res.ok) {
        localStorage.setItem('chatl_user', JSON.stringify({ emailOrPhone, isAdmin: data.isAdmin }));
        setTimeout(() => { hideAuthModal(); location.reload(); }, 1000);
      }
    }
  });
  // ƒêƒÉng xu·∫•t
  function logout() {
    localStorage.removeItem('chatl_user');
    location.reload();
  }
  // Th√™m n√∫t ƒëƒÉng xu·∫•t v√†o menu n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p
  function addLogoutMenu() {
    const aside = document.querySelector('aside ul');
    if (!document.getElementById('logout-menu')) {
      const li = document.createElement('li');
      li.innerHTML = '<a href="#" id="logout-menu">ƒêƒÉng xu·∫•t</a>';
      aside.appendChild(li);
      document.getElementById('logout-menu').onclick = function(e) { e.preventDefault(); logout(); };
    }
  }
  // ·∫®n menu ƒêƒÉng k√Ω/ƒêƒÉng nh·∫≠p khi ƒë√£ ƒëƒÉng nh·∫≠p
  function hideAuthMenus() {
    document.querySelectorAll('aside ul li a').forEach(a => {
      if (a.textContent.trim() === 'ƒêƒÉng k√Ω' || a.textContent.trim() === 'ƒêƒÉng nh·∫≠p') {
        a.parentElement.style.display = 'none';
      }
    });
  }
  // Khi load trang
  window.addEventListener('DOMContentLoaded', function() {
    checkAuth();
    if (localStorage.getItem('chatl_user')) {
      addLogoutMenu();
      hideAuthMenus();
    }
  });
});